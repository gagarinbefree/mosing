{"version":3,"sources":["actions/WorldMap.tsx","components/WorldMap.tsx","containers/WorldMap.tsx","components/App.tsx","reducers/WorldMap.tsx","reducers/Index.tsx","serviceWorker.ts","index.tsx"],"names":["getTravel","travel","error","type","parseXML","xml","res","routes","elements","forEach","r","route","label","attributes","part","options","push","p","place","text","value","WorldMap","props","handleChange","e","setMarker","this","getTravelAsync","position","map","lat","long","marker","str","split","parseFloat","Fragment","Map","center","zoom","style","width","height","TileLayer","attribution","url","Marker","Popup","className","undefined","onChange","isClearable","React","Component","connect","state","WorldMapReducer","payload","dispatch","a","fetch","method","xml2js","console","log","App","initalState","action","produce","draft","combineReducers","Boolean","window","location","hostname","match","initialState","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","L","prototype","icon","iconUrl","shadowUrl","iconShadow"],"mappings":"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","file":"static/js/main.27bc2e50.chunk.js","sourcesContent":["import { Dispatch, Action } from 'redux';\r\nimport { IPlace, ITravel, IRoute } from '../components/WorldMap';\r\nimport { xml2js, Element, ElementCompact } from 'xml-js'\r\n\r\ninterface IGetTravelAction extends Action {\r\n\ttravel: ITravel | null,\r\n\terror: string\r\n\t\r\n}\r\n\r\nexport interface ISetMarkerAction extends Action {\r\n\tmarker: IPlace\r\n}\r\n\r\nexport const getTravel = (travel: ITravel | null, error: string): IGetTravelAction => ({\r\n    type: 'WORLD_MAP_GET_TRAVEL',\r\n    travel,\r\n    error\r\n})\r\n\r\nexport const setMarker = (marker: IPlace): ISetMarkerAction => ({\r\n    type: 'WORLD_MAP_SET_MARKER',\r\n    marker\r\n})\r\n\r\nexport const getTravelAsync = () => {\r\n    return async (dispatch: Dispatch<IGetTravelAction>): Promise<void> => {\r\n        try {\r\n\t\t\tconst res = await fetch('./Travel.xml', {method: 'GET'});\t\t\t\r\n\r\n            dispatch(getTravel(parseXML(xml2js(await res.text())), ''));\r\n        }\r\n        catch (ex) {\r\n\t\t\tdispatch(getTravel(null, ex));\r\n\t\t\t\r\n\t\t\tconsole.log(ex);\r\n        }\r\n\t}\t\r\n}\r\n\r\nconst parseXML = (xml: Element | ElementCompact): ITravel => {\r\n\tlet res: ITravel = {\r\n\t\troutes: [] as IRoute[]\r\n\t};\r\n\t\r\n\txml.elements[0].elements.forEach((r: any) => {\r\n\t\tlet route: IRoute = {\r\n\t\t\tlabel: r.attributes.part,\r\n\t\t\toptions: [] as IPlace[]\r\n\t\t}\r\n\t\tres.routes.push(route);\r\n\t\tr.elements.forEach((p: any) => {\r\n\t\t\tlet place: IPlace = {\r\n\t\t\t\tlabel: p.elements[0].elements[0].text,\r\n\t\t\t\tvalue: `${p.elements[1].elements[0].text};${p.elements[2].elements[0].text}`\r\n\t\t\t}\t\t\r\n\t\t\troute.options.push(place);\r\n\t\t});\r\n\t});\r\n\t\r\n\treturn res;\r\n}\r\n\r\n","import React from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport Select from 'react-select';\r\nimport { ValueType } from 'react-select/src/types';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nexport interface IWorldMap {\r\n\tlat: number,\r\n\tlong: number,\r\n\tzoom: number\r\n}\r\n\r\nexport interface IPlace {\r\n\tlabel: string,\r\n\tvalue: string,\t\r\n}\r\n\r\nexport interface ITravel {\r\n\troutes: IRoute[]\r\n}\r\n\r\nexport interface IRoute {\r\n\tlabel: string,\r\n\toptions: IPlace[]\r\n}\r\n\r\nexport interface IWorldMapState {\r\n    type: string;\r\n    payload: IWordMapPayload;\r\n}\r\n\r\nexport interface IWordMapPayload {    \r\n\tmap: IWorldMap,\r\n\ttravel: ITravel | null;\r\n\tmarker: IPlace | null;\r\n\terror: string;\r\n}\r\n\r\nexport interface IWorldMapProps {\r\n\tgetTravelAsync(): Promise<void>;\r\n\tsetMarker(place: IPlace | null): void;\r\n}\r\n\r\nclass WorldMap extends React.Component<IWorldMapProps & IWordMapPayload> {\r\n\tconstructor(props: IWorldMapProps & IWordMapPayload) {\r\n\t\tsuper(props);        \r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tawait this.props.getTravelAsync();\r\n\t}\r\n\r\n\thandleChange = (e: ValueType<IPlace>) => {\t\t\r\n\t\tthis.props.setMarker(e as IPlace)\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet position: [number, number] = [this.props.map.lat, this.props.map.long];\r\n\t\tif (this.props.marker)\r\n\t\t{\r\n\t\t\tlet str: string[] = this.props.marker.value.split(';');\r\n\t\t\tposition = [parseFloat(str[0]), parseFloat(str[1])];\r\n\t\t}\r\n\r\n\t\treturn <React.Fragment>\r\n\t\t\t<Map center={position} zoom={this.props.map.zoom} style={{ width: '100%', height: '100vh' }}>\r\n\t\t\t\t<TileLayer attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t/>\t\t\t\t\r\n\t\t\t\t{this.props.marker && <Marker position={position}>\r\n\t\t\t\t\t<Popup><p>{this.props.marker.label}</p></Popup>\r\n\t\t\t\t</Marker>}\r\n\t\t\t</Map>\r\n\t\t\t<div className=\"select\">\r\n\t\t\t\t<Select options={this.props.travel ? this.props.travel.routes : undefined} \r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\tisClearable={true\r\n\t\t\t\t}/>\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t}\r\n}\r\n\r\nexport default WorldMap;","import { connect } from 'react-redux';\r\nimport * as Actions from '../actions/WorldMap';\r\nimport WorldMap, { IWorldMapProps, IWordMapPayload, IPlace } from '../components/WorldMap';\r\nimport { AnyAction } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nconst mapStateToProps = (state: any): IWordMapPayload => {\r\n\treturn state.WorldMapReducer.payload;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<IWordMapPayload, {}, AnyAction>): IWorldMapProps => {\r\n    return {  \r\n\t\tgetTravelAsync: async (): Promise<void> => dispatch(Actions.getTravelAsync()),\r\n        setMarker: (place: IPlace): Actions.ISetMarkerAction => dispatch(Actions.setMarker(place))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorldMap);","import React from 'react';\r\nimport WorldMap from '../containers/WorldMap';\r\n\r\nconst App: React.SFC = () => <WorldMap />;\r\n\r\nexport default App;","import produce from 'immer';\r\nimport { IWorldMapState } from '../components/WorldMap';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst initalState: IWorldMapState = {\r\n    type: '',\r\n    payload: {\r\n\t\tmap: {\r\n\t\t\tlat: 51.505,\r\n\t\t\tlong: -0.09,\r\n\t\t\tzoom: 12\r\n\t\t},\r\n\t\ttravel: null,\r\n\t\tmarker: null,        \r\n        error: ''\r\n    }\r\n}\r\n\r\nconst WorldMapReducer = (state: IWorldMapState = initalState, action: AnyAction) => {\r\n    return produce(state, (draft) => {\r\n        if (action.type === 'WORLD_MAP_GET_TRAVEL') {\r\n            draft.payload.travel = action.travel;\r\n        }\r\n        else if (action.type === 'WORLD_MAP_SET_MARKER') {\r\n\t\t\tdraft.payload.marker = action.marker;\t\t\t\t\r\n        }\r\n    });\r\n}\r\n\r\nexport default WorldMapReducer;","import WorldMapReducer from './WorldMap';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n    WorldMapReducer\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/Index';\nimport * as serviceWorker from './serviceWorker';\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport './index.css';\n\nconst configureStore = (initialState: any) => createStore(rootReducer, initialState, applyMiddleware(thunk));\n\nexport const store = configureStore(undefined);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\nL.Marker.prototype.options.icon = L.icon({\n\ticonUrl: icon,\n\tshadowUrl: iconShadow\n});"],"sourceRoot":""}